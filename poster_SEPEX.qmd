---
title: "Eye-tracking during reading at high and low sampling rates" 
format:
  poster-typst:
    size: "33x47" # You can adjust this if needed
    poster-authors: "Bernhard Angele^1^, Zeynep Gunes Ozkan^2^, Marina Serrano-Carot^1^, and Jon Andoni Duñabeitia^1^"
    departments: "^1^Universidad Nebrija; ^2^University of Valencia"
    poster-font: "Hind" 
    header-line-color: "000000"
    header-background-color: "C2002F"
    header-text-color: "FFFFFF"
    univ-logo: "./images/nebrija.png" # Replace with your logo
    univ-image: "./images/CINC.png" # Replace with your image
    univ-logo-column-size: 3 
    univ-logo-scale: 100 
    title-column-size: 25
    title-font-size: 72 
    authors-font-size: 36 
    univ-image-column-size: 4
    univ-image-scale: 100 
    footer-text: "SEPEX 2024 - October 2024, Almería" # Add your conference name
    footer-emails: "bangele1@nebrija.es" # Add your email
    footer-background-color: "C2002F" # Choose your color
    footer-text-color: "FFFFFF"
    footer-url: "This research has been supported by Grant 2022-T1/SOC-23980 from the Community of Madrid." # Add a link or QR code
    footer-url-font-size: 24
fig-format: svg
csl: "apa.csl"
bibliography: references.bib
---

```{r setup}
#| cache: false  
#| echo: FALSE
#| warning: FALSE
#set.seed(42)
#knitr::opts_chunk$set(cache = FALSE)
#knitr::opts_chunk$set(cache.lazy = FALSE)
#knitr::opts_chunk$set(error = TRUE)
#knitr::opts_chunk$set(echo = FALSE)

library(Cairo)
library(brms)
library(tidybayes)

library(sjPlot)
library(R.utils)

library(gt)
library(gtExtras)
library(extrafont)
suppressMessages(library(tidyverse))
library(qs)
library(countrycode)
library(cartogram)
library(sf)
library(tmap)
library(saccades)
#library(plotly)
library(showtext)
showtext_auto()
#x11(type="cairo")

iterations = 1

library(modelsummary)

# to get fonts looking better in the plots on windows
#loadfonts(device="win")

theme_set(theme_sjplot())

# read functions for processing data
R.utils::sourceDirectory("../../functions/R/", modifiedOnly=TRUE);

load("../../words_espal_frequencies.RData")


# function to read scopus text files with publication counts by country
read_scopus_text_files <- function(file_path) {
  raw_lines <- raw_lines <- readLines(file_path) 
  csv_pattern <- "^\"[^\"]+\",\"\\d+\"$"  # Country name in quotes, comma, number in quotes
  valid_lines <- raw_lines[grepl(csv_pattern, raw_lines)]
  read_csv(I(valid_lines), col_names = c("Countries", "Record Count"), col_types = cols(
  Countries = col_character(),
  `Record Count` = col_double()))
}

data("World")

# function to plot a map of the world with publication counts by country, either as a choropleth or a cartogram
plot_publications_map <- function(pubs_data, map_type = "auto", max_iterations = 5) {
    world_map <- st_transform(World, crs = "ESRI:54030")
    world_map <- world_map %>% filter(name != "Antarctica")
    
    pubs_data_with_iso3c <- pubs_data %>% 
      mutate(iso_a3 = countrycode(Countries, origin = "country.name", destination = "iso3c"),
             pub_record_count = `Record Count`)
    
    world_map <- left_join(world_map, pubs_data_with_iso3c, by = "iso_a3")
    
    if (map_type == "auto") {
      if (sum(!is.na(world_map$pub_record_count)) > 50) {
        map_type <- "cartogram"
      } else {
        map_type <- "choropleth"
      }
    }
    
    if (map_type == "cartogram") {
      world_map_cartogram <- cartogram_cont(
        x = world_map %>% mutate(pub_record_count = ifelse(!is.na(pub_record_count), pub_record_count, 1)),
        weight = "pub_record_count", itermax = max_iterations
      )
      ggplot(world_map_cartogram) +
        geom_sf(aes(fill = pub_record_count)) +
        scale_fill_distiller() +
        theme_minimal() +
        theme(legend.position = "bottom") +
        labs(title = "Publications by Country") +
        guides(fill=guide_colorbar(title="Number of publications"))
      #tm_shape(world_map_cartogram) + 
      #  tm_polygons("pub_record_count", style = "jenks",  title = "Publications by Country") +
      #  tm_layout(frame = FALSE, legend.position = c("left", "bottom"))
    } else {
      ggplot(world_map) +
        geom_sf(aes(fill = pub_record_count)) +
        scale_fill_distiller() +
        theme_minimal() +
        theme(legend.position = "bottom") +
        labs(title = "Publications by Country") +
        guides(fill=guide_colorbar(title="Number of publications"))
    }
  }

```

# Introduction

-   Eye movements are a window into the reading process.
-   However, if we examine the eye-movement literature, we find that most results come from a small number of countries and involve reading in a limited number of languages.

## Illustrating the eye-movement gap

-   Data from Scopus: Searching for "eye" and "track(er/ing)" or "movement(s)" and "reading" in the title, abstract, and keywords [@Angele2024]
-   Publications from 1974 to 2024
-   Counting country affiliations by author (publications can have multiple authors and author affiliations), excluding affiliations with missing country names

## Publications over time

```{r plot_publications_1974_2000_cartogram}
#| cache: true
#| echo: FALSE
#| warning: FALSE
#| fig.cap: "Cartogram of publications from 1974 to 2000"
#| fig.align: "center"
#| fig.width: 9
#| fig.height: 5

pubs_data_1974_2000 <- read_scopus_text_files("../../eye_movement_publication_statistics/Scopus-reading_1974_2000.csv")
plot_publications_map(pubs_data_1974_2000, map_type = "cartogram", max_iterations = iterations) + scale_fill_viridis_c()
```

```{r plot_publications_2001_2010_cartogram}
#| echo: FALSE
#| warning: FALSE
#| fig.cap: "Cartogram of publications from 2001 to 2010"
#| fig.align: "center"
#| fig.width: 9
#| fig.height: 5
#| cache: true
# publications 2001-2010
pubs_data_2001_2010 <- read_scopus_text_files("../../eye_movement_publication_statistics/Scopus-reading_2001_2010.csv")
plot_publications_map(pubs_data_2001_2010, map_type = "cartogram", max_iterations = iterations) + scale_fill_viridis_c()
```

## Publications over time: 2011 -- 2020

```{r plot_publications_2011_2020_cartogram}
#| echo: FALSE
#| warning: FALSE
#| fig.cap: "Cartogram of publications from from 2011 to 2020"
#| fig.align: "center"
#| fig.width: 9
#| fig.height: 5
#| cache: true

# publications 2011-2020
pubs_data_2011_2020 <- read_scopus_text_files("../../eye_movement_publication_statistics/Scopus-reading_2011_2020.csv")
plot_publications_map(pubs_data_2011_2020, map_type = "cartogram", max_iterations = iterations) + scale_fill_viridis_c()
```

```{r plot_publications_2021_2024_cartogram}
#| echo: FALSE
#| warning: FALSE
#| fig.cap: "Cartogram of publications from 2021 to 2024"
#| fig.align: "center"
#| fig.width: 9
#| fig.height: 5
#| cache: true

# publications 2021-2024
pubs_data_2021_2024 <- read_scopus_text_files("../../eye_movement_publication_statistics/Scopus-reading_2021_2024.csv")
plot_publications_map(pubs_data_2021_2024, map_type = "cartogram", max_iterations = iterations) + scale_fill_viridis_c()
```

## What are we missing?

-   General issue of WEIRD research [@henrich2010]: Western participants may not be representative of all readers or even the majority of readers

-   English, German, French, Spanish, Italian etc. are similar languages in many respects and all share the same writing system

## Why is there so little eye-movement research except in a few countries?

-   Most expensive component: High-speed, high-resolution cameras
-   Sampling rate is a key bottleneck
-   Can we study reading at lower sampling rates?

# Our study

## Our approach

-   We take a practical approach: Which is the lowest sampling rate that allows us to find evidence of cognitive processing?
-   We need a benchmark effect -- a phenomenon that is well-studied and whose existence (and effect size) is clear
-   The word frequency effect on fixation duration is ideal for this

## Method {.smaller}

```{r word_info}
#| warning: FALSE
#| echo: FALSE
load("../../words_espal_frequencies.RData")
mean_freq <- sentences_words_espal %>% filter(target_word == TRUE) %>% group_by(frequency_condition) %>% summarize(frequency = mean(frq))
```

-   32 participants read 400 sentences in Spanish

-   Eye movements are recorded by an SR Research Eyelink Portable Duo

-   Four sampling rates 250 Hz, 500 Hz, 1000 Hz, and 2000 Hz (100 sentences each)

-   Frequency manipulation: each sentence has a target word that was manipulated to be either

    -   high frequency (mean frequency `r round(mean_freq %>% filter(frequency_condition == "sentence_high") %>% .$frequency)`/million)

    -   low frequency (mean frequency `r round(mean_freq %>% filter(frequency_condition == "sentence_low") %>% .$frequency)`/million)

-   The context up to the target word was identical for both versions of the sentence.

    -   Context after the target word was allowed to vary.

# Results

## Trials

```{r plot_1000_hz_samples}
#| message: false
#| echo: false
#| cache: true
#| warning: FALSE
#| fig.cap: "Example trial at 1000 Hz"
#| fig.align: "center"
#| fig.width: 9
#| fig.height: 2.2


sub1000 <- qread("../../sampling_rate_subjects_1000.qs")

example_sub_nr = 15
example_trial_nr = 60

plot_1000 <- plot_trial(sub1000[[example_sub_nr]], trial_nr = example_trial_nr, 
           show_original_samples = TRUE,show_downsampled_samples = FALSE,downsampling_rate = 1000,show_eyelink_fixations = TRUE, show_EK_fixations = FALSE, show_EK_fixations_downsampled = FALSE,show_words = TRUE,show_word_boundaries = TRUE,x_limits = c(90,1200), y_limits = c(650,450), letter_width = 12, words_font_size = 3) + theme_classic()

plot_1000
```

```{r plot_250_hz_trial_eyelink_EK}
#| message: false
#| echo: false
#| cache: true
#| warning: false
#| fig.cap: "Example trial at 250 Hz"
#| fig.align: "center"
#| fig.width: 9
#| fig.height: 2.2

sub250 <- qread("../../sampling_rate_subjects_250.qs")

plot_250 <- plot_trial(sub250[[31]], trial_nr = 27, 
           show_original_samples = TRUE,show_downsampled_samples = FALSE,downsampling_rate = 250,show_eyelink_fixations = TRUE, show_EK_fixations = FALSE, show_EK_fixations_downsampled = FALSE,show_words = TRUE,show_word_boundaries = TRUE,x_limits = c(90,1200), y_limits = c(650,450), letter_width = 12, words_font_size = 3) + theme_classic()

plot_250
```

```{r plot_1000_hz_trial_downsampled_with_fixations}
#| echo: false
#| cache: true
#| message: false
#| warning: false
#| fig.cap: "1000 Hz trial downsampled to 50 Hz"
#| fig.align: "center"
#| fig.width: 9
#| fig.height: 2.2

plot_1000_downsampled <- plot_trial(sub1000[[example_sub_nr]], trial_nr = example_trial_nr, 
           show_original_samples = FALSE,show_downsampled_samples = TRUE,downsampling_rate = 50,show_eyelink_fixations = FALSE, show_EK_fixations = FALSE, show_EK_fixations_downsampled = TRUE,show_words = TRUE,show_word_boundaries = TRUE,x_limits = c(90,1200), y_limits = c(650,450), letter_width = 12, words_font_size = 3) + theme_classic()
 

plot_1000_downsampled
```

## Bayesian LMMs

#### Original data

```{r bayes_plot_el_gd}
#| echo: false
#| cache: true
#| message: false
#| warning: false
#| fig.cap: "Evidence for frequency effect in GD on the target word by sampling rate (Eyelink)"
#| fig.align: "center"
#| fig.width: 9
#| fig.height: 5


brm_el_gd_250 <- qread("../../brm_el_gd_250_all_sentences.qs")

brm_el_gd_500 <- qread("../../brm_el_gd_500_all_sentences.qs")

brm_el_gd_1000 <- qread("../../brm_el_gd_1000_all_sentences.qs")

brm_el_gd_2000 <- qread("../../brm_el_gd_2000_all_sentences.qs")

brm_el_gd_all <- rbind(brm_el_gd_250 %>% gather_draws(b_condition1) %>% mutate(rate = 250),
                        brm_el_gd_500 %>% gather_draws(b_condition1) %>% mutate(rate = 500),
                        brm_el_gd_1000 %>% gather_draws(b_condition1) %>% mutate(rate = 1000),
                        brm_el_gd_2000 %>% gather_draws(b_condition1) %>% mutate(rate = 2000)) 


brmplot_gd <- brm_el_gd_all %>% filter(.variable == "b_condition1") %>%
  ggplot(aes(y = factor(rate), x = .value, fill = after_stat(x > 0))) +
  stat_halfeye() + geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") + geom_label(data = brm_el_gd_all %>%
              filter(.variable == "b_condition1") %>%
              group_by(rate) %>%
              summarize(proportion_below_zero = mean(.value < 0)),
            aes(label = sprintf("%.2f", proportion_below_zero), x = 0, y = factor(rate)),
            hjust = -1.5, vjust = -1.5, color = "black", size = 4) + labs(title = "Posterior distribution for frequency effect coefficient", subtitle = "log(GD) on the target word", x = "Value", y = "Sampling rate (Hz)", caption = "Coefficient can be interpreted as the difference between high and low frequency target words.\nRed box gives proportion of posterior distribution < 0") + theme(legend.position = "none")

brmplot_gd

```

#### Downsampled data

```{r bayes_plot_downsampled_ek_gd_100}
#| echo: false
#| cache: true
#| message: false
#| warning: false
#| fig.cap: "PLACEHOLDER: Evidence for frequency effect in GD on the target word by sampling rate (downsampled data, 100 sentences per participant)"
#| fig.align: "center"
#| fig.width: 9
#| fig.height: 5


brmplot_gd
```

```{r bayes_plot_downsampled_ek_gd_400}
#| echo: false
#| cache: true
#| message: false
#| warning: false
#| fig.cap: "PLACEHOLDER: Evidence for frequency effect in GD on the target word by sampling rate (downsampled data, 400 sentences per participant)"
#| fig.align: "center"
#| fig.width: 9
#| fig.height: 5


brmplot_gd
```

# Discussion

::: {.block fill="luma(210)" inset="25pt" radius="15pt" stroke="5pt + blue"}
-   If you want to use affordable eye-trackers to study reading:
    -   target effects that are large enough
    -   choose aggregate measures (GD, TVT, go-past time, etc.)
    -   plan to use a large sample
    -   consider running a pilot study with a known effect (word frequency) and do a power analysis based on the results
:::
